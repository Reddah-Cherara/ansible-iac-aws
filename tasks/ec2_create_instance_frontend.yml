#
# Create EC2 Instances 
#
# ============================================================
- name: start the instance frontend on zone a
  local_action:
        module: ec2
        key_name: "{{ ec2_keypair_name_new }}"
        group_id:           "{{ frontend_sg_id }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ec2_image }}"
        spot_launch_group: report_generators
        vpc_subnet_id: "{{ public_subnet_id_a }}"
        region: "{{ aws_region }}"
        instance_tags: "{{ aws_tags_frontend }}"
        assign_public_ip: yes
        wait: true
        exact_count: "{{ ec2_count }}"
        count_tag:
          Role: "frontend-a-vm-{{ ec2_tag_role }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: "{{ ec2_volume_size }}"
            delete_on_termination: true
  register: ec2instance_frontend_a



- name: "Wait for the instance(s) to boot by checking the ssh port ({{ ec2instance_frontend_a.instance_ids }})"
  wait_for:             host={{item.public_dns_name}} port=22 delay=60 timeout=320 state=started
  with_items:           "{{ ec2instance_frontend_a.instances }}"
  
# ============================================================
- name: start the instance frontend on zone b
  local_action:
        module: ec2
        key_name: "{{ ec2_keypair_name_new }}"
        group_id:           "{{ frontend_sg_id }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ec2_image }}"
        spot_launch_group: report_generators
        vpc_subnet_id: "{{ public_subnet_id_b }}"
        region: "{{ aws_region }}"
        instance_tags: "{{ aws_tags_frontend }}"
        assign_public_ip: yes
        wait: true
        exact_count: "{{ ec2_count }}"
        count_tag:
          Role: "frontend-b-vm-{{ ec2_tag_role }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: "{{ ec2_volume_size }}"
            delete_on_termination: true
  register: ec2instance_frontend_b
- name: "Wait for the instance(s) to boot by checking the ssh port ({{ ec2instance_frontend_b.instance_ids }})"
  wait_for:             host={{item.public_dns_name}} port=22 delay=60 timeout=320 state=started
  with_items:           "{{ ec2instance_frontend_b.instances }}"

# ============================================================
- name: Insert a line with groupe webservers at the end of a file.
  lineinfile:
    path: /Users/rcherara/Projects-AWS/rcherara-aws-ansible-new/hosts
    line: "[webservers]"

- name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
  local_action: lineinfile 
                dest="./hosts" 
                regexp={{ item.public_ip }}
                insertafter="[webservers]" line="{{ item.public_ip }}  ansible_user={{ aws_ubuntu_user }}  ansible_connection=ssh"
  with_items: "{{ ec2instance_frontend_a.instances }}"


- name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
  local_action: lineinfile 
                dest="./hosts" 
                regexp={{ item.public_ip }} 
                insertafter="[webservers]" line="{{ item.public_ip }}  ansible_user={{ aws_ubuntu_user }}  ansible_connection=ssh"
  with_items: "{{ ec2instance_frontend_b.instances }}"

- name: Refresh inventory to ensure new instaces exist in inventory
  meta: refresh_inventory